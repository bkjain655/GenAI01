const results = [
    {
        "question": "What tables does this database contain",
        "answer": {
            "response": "This database contains the following tables:\n\n1. alembic_version\n2. experiments\n3. registered_models\n4. experiment_tags\n5. model_versions\n6. registered_model_aliases\n7. registered_model_tags\n8. runs\n9. latest_metrics\n10. metrics\n11. model_version_tags\n12. params\n13. tags",
            "sources": {
              "content": "",
              "raw_output": ["alembic_version", "experiments", "registered_models", "experiment_tags", "model_versions", "registered_model_aliases", "registered_model_tags", "runs", "latest_metrics", "metrics", "model_version_tags", "params", "tags"],
              "tool_name": "list_tables"
            }
        }
    },
    {
        "question": "Can you describe the experiments table",
        "answer": {
            "response": `The 'experiments' table has the following columns:\n\n1. 'experiment_id': A unique identifier for each experiment (serial type).\n2. 'name': The name of the experiment (varchar type, maximum length of 256 characters).\n3. 'artifact_location': The location where the experiment artifacts are stored (varchar type, maximum length of 256 characters).\n4. 'lifecycle_stage': The stage of the experiment\'s lifecycle, which can be either "active" or "deleted" (varchar type, maximum length of 32 characters).\n5. 'creation_time': The timestamp when the experiment was created (bigint type).\n6. 'last_update_time': The timestamp of the last update made to the experiment (bigint type).\n\nThe table has the following constraints:\n\n1. 'experiment_pk': Primary key constraint on the 'experiment_id' column.\n2. 'experiments_name_key': Unique constraint on the 'name' column.\n3. 'experiments_lifecycle_stage': Check constraint to ensure that the 'lifecycle_stage' value is either "active" or "deleted".'`,
            "sources": {
                "content": "\nCREATE TABLE experiments (\n\texperiment_id SERIAL NOT NULL, \n\tname VARCHAR(256) NOT NULL, \n\tartifact_location VARCHAR(256), \n\tlifecycle_stage VARCHAR(32), \n\tcreation_time BIGINT, \n\tlast_update_time BIGINT, \n\tCONSTRAINT experiment_pk PRIMARY KEY (experiment_id), \n\tCONSTRAINT experiments_name_key UNIQUE (name), \n\tCONSTRAINT experiments_lifecycle_stage CHECK (lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[]))\n)\n\n\n",
                "raw_output": ["\nCREATE TABLE experiments (\n\texperiment_id SERIAL NOT NULL, \n\tname VARCHAR(256) NOT NULL, \n\tartifact_location VARCHAR(256), \n\tlifecycle_stage VARCHAR(32), \n\tcreation_time BIGINT, \n\tlast_update_time BIGINT, \n\tCONSTRAINT experiment_pk PRIMARY KEY (experiment_id), \n\tCONSTRAINT experiments_name_key UNIQUE (name), \n\tCONSTRAINT experiments_lifecycle_stage CHECK (lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[]))\n)\n\n\n"],
                "tool_name": "describe_tables"
            }
        }
    },
    {
        "question": "Can you generate descriptions so I can put these into a business catalog?",
        "answer": {
            "response": 'Certainly! Here are the descriptions of the `experiments` table columns that you can use in a business catalog:\n\n1. `experiment_id`: A unique identifier for each experiment.\n2. `name`: The name of the experiment.\n3. `artifact_location`: The location where the experiment artifacts are stored.\n4. `lifecycle_stage`: The stage of the experiment\'s lifecycle, which can be either "active" or "deleted".\n5. `creation_time`: The timestamp when the experiment was created.\n6. `last_update_time`: The timestamp of the last update made to the experiment.\n\nPlease note that the `experiments` table is used to store information about experiments conducted in the system. It provides details such as the experiment name, artifact location, lifecycle stage, and timestamps for creation and updates.',
            "sources": {
                "content": "",
                "raw_output": ["experiments"],
                "tool_name": "generate_descriptions"
            }
        }
    },
    {
        "question": "What is the best way to combine these tables? Please analyze all tables in the database.",
        "answer": {
            "response": "The best way to combine tables depends on the specific requirements and relationships between the tables. Here are a few common ways to combine tables:\n\n1. **Joining tables**: If there is a common column between two or more tables, you can use a join operation to combine them based on that column. For example, if the `experiments` table has a foreign key column referencing the `runs` table, you can join the two tables using that column to retrieve information from both tables in a single query.\n\n2. **Subqueries**: If you need to retrieve data from multiple tables and aggregate or filter the results, you can use subqueries. Subqueries allow you to nest one query inside another, enabling you to combine the results of multiple queries into a single result set.\n\n3. **Views**: Views are virtual tables that are based on the result of a query. They allow you to combine data from multiple tables and present it as a single table-like structure. Views can simplify complex queries and provide a convenient way to access combined data without modifying the underlying tables.\n\n4. **Data modeling**: If you frequently need to combine specific tables, you can consider creating a new table that consolidates the relevant columns from those tables. This approach can improve query performance and simplify data retrieval, especially if the combined data is frequently accessed together.\n\nIt's important to analyze the relationships and requirements of your specific use case to determine the most appropriate way to combine the tables.",
            "sources": {
                "content": "\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL, \n\tCONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)\n)\n\n\n\n\nCREATE TABLE experiments (\n\texperiment_id SERIAL NOT NULL, \n\tname VARCHAR(256) NOT NULL, \n\tartifact_location VARCHAR(256), \n\tlifecycle_stage VARCHAR(32), \n\tcreation_time BIGINT, \n\tlast_update_time BIGINT, \n\tCONSTRAINT experiment_pk PRIMARY KEY (experiment_id), \n\tCONSTRAINT experiments_name_key UNIQUE (name), \n\tCONSTRAINT experiments_lifecycle_stage CHECK (lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[]))\n)\n\n\n\n\nCREATE TABLE registered_models (\n\tname VARCHAR(256) NOT NULL, \n\tcreation_time BIGINT, \n\tlast_updated_time BIGINT, \n\tdescription VARCHAR(5000), \n\tCONSTRAINT registered_model_pk PRIMARY KEY (name)\n)\n\n\n\n\nCREATE TABLE experiment_tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\texperiment_id INTEGER NOT NULL, \n\tCONSTRAINT experiment_tag_pk PRIMARY KEY (key, experiment_id), \n\tCONSTRAINT experiment_tags_experiment_id_fkey FOREIGN KEY(experiment_id) REFERENCES experiments (experiment_id)\n)\n\n\n\n\nCREATE TABLE model_versions (\n\tname VARCHAR(256) NOT NULL, \n\tversion INTEGER NOT NULL, \n\tcreation_time BIGINT, \n\tlast_updated_time BIGINT, \n\tdescription VARCHAR(5000), \n\tuser_id VARCHAR(256), \n\tcurrent_stage VARCHAR(20), \n\tsource VARCHAR(500), \n\trun_id VARCHAR(32), \n\tstatus VARCHAR(20), \n\tstatus_message VARCHAR(500), \n\trun_link VARCHAR(500), \n\tCONSTRAINT model_version_pk PRIMARY KEY (name, version), \n\tCONSTRAINT model_versions_name_fkey FOREIGN KEY(name) REFERENCES registered_models (name) ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE registered_model_aliases (\n\talias VARCHAR(256) NOT NULL, \n\tversion INTEGER NOT NULL, \n\tname VARCHAR(256) NOT NULL, \n\tCONSTRAINT registered_model_alias_pk PRIMARY KEY (name, alias), \n\tCONSTRAINT registered_model_alias_name_fkey FOREIGN KEY(name) REFERENCES registered_models (name) ON DELETE CASCADE ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE registered_model_tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\tname VARCHAR(256) NOT NULL, \n\tCONSTRAINT registered_model_tag_pk PRIMARY KEY (key, name), \n\tCONSTRAINT registered_model_tags_name_fkey FOREIGN KEY(name) REFERENCES registered_models (name) ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE runs (\n\trun_uuid VARCHAR(32) NOT NULL, \n\tname VARCHAR(250), \n\tsource_type VARCHAR(20), \n\tsource_name VARCHAR(500), \n\tentry_point_name VARCHAR(50), \n\tuser_id VARCHAR(256), \n\tstatus VARCHAR(9), \n\tstart_time BIGINT, \n\tend_time BIGINT, \n\tsource_version VARCHAR(50), \n\tlifecycle_stage VARCHAR(20), \n\tartifact_uri VARCHAR(200), \n\texperiment_id INTEGER, \n\tdeleted_time BIGINT, \n\tCONSTRAINT run_pk PRIMARY KEY (run_uuid), \n\tCONSTRAINT runs_experiment_id_fkey FOREIGN KEY(experiment_id) REFERENCES experiments (experiment_id), \n\tCONSTRAINT runs_lifecycle_stage CHECK (lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[])), \n\tCONSTRAINT runs_status_check CHECK (status::text = ANY (ARRAY['SCHEDULED'::character varying, 'FAILED'::character varying, 'FINISHED'::character varying, 'RUNNING'::character varying, 'KILLED'::character varying]::text[])), \n\tCONSTRAINT source_type CHECK (source_type::text = ANY (ARRAY['NOTEBOOK'::character varying, 'JOB'::character varying, 'LOCAL'::character varying, 'UNKNOWN'::character varying, 'PROJECT'::character varying]::text[]))\n)\n\n\n\n\nCREATE TABLE latest_metrics (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue DOUBLE PRECISION NOT NULL, \n\ttimestamp BIGINT, \n\tstep BIGINT NOT NULL, \n\tis_nan BOOLEAN NOT NULL, \n\trun_uuid VARCHAR(32) NOT NULL, \n\tCONSTRAINT latest_metric_pk PRIMARY KEY (key, run_uuid), \n\tCONSTRAINT latest_metrics_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n\n\nCREATE TABLE metrics (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue DOUBLE PRECISION NOT NULL, \n\ttimestamp BIGINT NOT NULL, \n\trun_uuid VARCHAR(32) NOT NULL, \n\tstep BIGINT DEFAULT '0'::bigint NOT NULL, \n\tis_nan BOOLEAN DEFAULT false NOT NULL, \n\tCONSTRAINT metric_pk PRIMARY KEY (key, timestamp, step, run_uuid, value, is_nan), \n\tCONSTRAINT metrics_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n\n\nCREATE TABLE model_version_tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\tname VARCHAR(256) NOT NULL, \n\tversion INTEGER NOT NULL, \n\tCONSTRAINT model_version_tag_pk PRIMARY KEY (key, name, version), \n\tCONSTRAINT model_version_tags_name_version_fkey FOREIGN KEY(name, version) REFERENCES model_versions (name, version) ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE params (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(500) NOT NULL, \n\trun_uuid VARCHAR(32) NOT NULL, \n\tCONSTRAINT param_pk PRIMARY KEY (key, run_uuid), \n\tCONSTRAINT params_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n\n\nCREATE TABLE tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\trun_uuid VARCHAR(32) NOT NULL, \n\tCONSTRAINT tag_pk PRIMARY KEY (key, run_uuid), \n\tCONSTRAINT tags_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n",
                "raw_output": ["\nCREATE TABLE alembic_version (\n\tversion_num VARCHAR(32) NOT NULL, \n\tCONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)\n)\n\n\n\n\nCREATE TABLE experiments (\n\texperiment_id SERIAL NOT NULL, \n\tname VARCHAR(256) NOT NULL, \n\tartifact_location VARCHAR(256), \n\tlifecycle_stage VARCHAR(32), \n\tcreation_time BIGINT, \n\tlast_update_time BIGINT, \n\tCONSTRAINT experiment_pk PRIMARY KEY (experiment_id), \n\tCONSTRAINT experiments_name_key UNIQUE (name), \n\tCONSTRAINT experiments_lifecycle_stage CHECK (lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[]))\n)\n\n\n\n\nCREATE TABLE registered_models (\n\tname VARCHAR(256) NOT NULL, \n\tcreation_time BIGINT, \n\tlast_updated_time BIGINT, \n\tdescription VARCHAR(5000), \n\tCONSTRAINT registered_model_pk PRIMARY KEY (name)\n)\n\n\n\n\nCREATE TABLE experiment_tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\texperiment_id INTEGER NOT NULL, \n\tCONSTRAINT experiment_tag_pk PRIMARY KEY (key, experiment_id), \n\tCONSTRAINT experiment_tags_experiment_id_fkey FOREIGN KEY(experiment_id) REFERENCES experiments (experiment_id)\n)\n\n\n\n\nCREATE TABLE model_versions (\n\tname VARCHAR(256) NOT NULL, \n\tversion INTEGER NOT NULL, \n\tcreation_time BIGINT, \n\tlast_updated_time BIGINT, \n\tdescription VARCHAR(5000), \n\tuser_id VARCHAR(256), \n\tcurrent_stage VARCHAR(20), \n\tsource VARCHAR(500), \n\trun_id VARCHAR(32), \n\tstatus VARCHAR(20), \n\tstatus_message VARCHAR(500), \n\trun_link VARCHAR(500), \n\tCONSTRAINT model_version_pk PRIMARY KEY (name, version), \n\tCONSTRAINT model_versions_name_fkey FOREIGN KEY(name) REFERENCES registered_models (name) ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE registered_model_aliases (\n\talias VARCHAR(256) NOT NULL, \n\tversion INTEGER NOT NULL, \n\tname VARCHAR(256) NOT NULL, \n\tCONSTRAINT registered_model_alias_pk PRIMARY KEY (name, alias), \n\tCONSTRAINT registered_model_alias_name_fkey FOREIGN KEY(name) REFERENCES registered_models (name) ON DELETE CASCADE ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE registered_model_tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\tname VARCHAR(256) NOT NULL, \n\tCONSTRAINT registered_model_tag_pk PRIMARY KEY (key, name), \n\tCONSTRAINT registered_model_tags_name_fkey FOREIGN KEY(name) REFERENCES registered_models (name) ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE runs (\n\trun_uuid VARCHAR(32) NOT NULL, \n\tname VARCHAR(250), \n\tsource_type VARCHAR(20), \n\tsource_name VARCHAR(500), \n\tentry_point_name VARCHAR(50), \n\tuser_id VARCHAR(256), \n\tstatus VARCHAR(9), \n\tstart_time BIGINT, \n\tend_time BIGINT, \n\tsource_version VARCHAR(50), \n\tlifecycle_stage VARCHAR(20), \n\tartifact_uri VARCHAR(200), \n\texperiment_id INTEGER, \n\tdeleted_time BIGINT, \n\tCONSTRAINT run_pk PRIMARY KEY (run_uuid), \n\tCONSTRAINT runs_experiment_id_fkey FOREIGN KEY(experiment_id) REFERENCES experiments (experiment_id), \n\tCONSTRAINT runs_lifecycle_stage CHECK (lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[])), \n\tCONSTRAINT runs_status_check CHECK (status::text = ANY (ARRAY['SCHEDULED'::character varying, 'FAILED'::character varying, 'FINISHED'::character varying, 'RUNNING'::character varying, 'KILLED'::character varying]::text[])), \n\tCONSTRAINT source_type CHECK (source_type::text = ANY (ARRAY['NOTEBOOK'::character varying, 'JOB'::character varying, 'LOCAL'::character varying, 'UNKNOWN'::character varying, 'PROJECT'::character varying]::text[]))\n)\n\n\n\n\nCREATE TABLE latest_metrics (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue DOUBLE PRECISION NOT NULL, \n\ttimestamp BIGINT, \n\tstep BIGINT NOT NULL, \n\tis_nan BOOLEAN NOT NULL, \n\trun_uuid VARCHAR(32) NOT NULL, \n\tCONSTRAINT latest_metric_pk PRIMARY KEY (key, run_uuid), \n\tCONSTRAINT latest_metrics_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n\n\nCREATE TABLE metrics (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue DOUBLE PRECISION NOT NULL, \n\ttimestamp BIGINT NOT NULL, \n\trun_uuid VARCHAR(32) NOT NULL, \n\tstep BIGINT DEFAULT '0'::bigint NOT NULL, \n\tis_nan BOOLEAN DEFAULT false NOT NULL, \n\tCONSTRAINT metric_pk PRIMARY KEY (key, timestamp, step, run_uuid, value, is_nan), \n\tCONSTRAINT metrics_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n\n\nCREATE TABLE model_version_tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\tname VARCHAR(256) NOT NULL, \n\tversion INTEGER NOT NULL, \n\tCONSTRAINT model_version_tag_pk PRIMARY KEY (key, name, version), \n\tCONSTRAINT model_version_tags_name_version_fkey FOREIGN KEY(name, version) REFERENCES model_versions (name, version) ON UPDATE CASCADE\n)\n\n\n\n\nCREATE TABLE params (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(500) NOT NULL, \n\trun_uuid VARCHAR(32) NOT NULL, \n\tCONSTRAINT param_pk PRIMARY KEY (key, run_uuid), \n\tCONSTRAINT params_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n\n\nCREATE TABLE tags (\n\tkey VARCHAR(250) NOT NULL, \n\tvalue VARCHAR(5000), \n\trun_uuid VARCHAR(32) NOT NULL, \n\tCONSTRAINT tag_pk PRIMARY KEY (key, run_uuid), \n\tCONSTRAINT tags_run_uuid_fkey FOREIGN KEY(run_uuid) REFERENCES runs (run_uuid)\n)\n\n\n"],
                "tool_name": "describe_tables"
            }
        }
    },
    {
        "question": "I have four tables -- business locations, employees working on product lines, products, and revenue tables -- in my database. Because of COVID sanctions, we have employees in China on furlough. Can you write me a query that shows revenue impacted by this China closure?",
        "answer": {
            "response": 'Certainly! Here are the descriptions of the `experiments` table columns that you can use in a business catalog:\n\n1. `experiment_id`: A unique identifier for each experiment.\n2. `name`: The name of the experiment.\n3. `artifact_location`: The location where the experiment artifacts are stored.\n4. `lifecycle_stage`: The stage of the experiment\'s lifecycle, which can be either "active" or "deleted".\n5. `creation_time`: The timestamp when the experiment was created.\n6. `last_update_time`: The timestamp of the last update made to the experiment.\n\nPlease note that the `experiments` table is used to store information about experiments conducted in the system. It provides details such as the experiment name, artifact location, lifecycle stage, and timestamps for creation and updates.',
            "sources": {
              "content": "",
              "raw_output": ["revenue_impact"],
              "tool_name": "revenue_impact"
            }
        }
    },
]
export default results;

const questions = [
    "What tables does this database contain",
    "Can you describe the experiments table",
    "Can you generate descriptions so I can put these into a business catalog?",
    "What is the best way to combine these tables? Please analyze all tables in the database.",
    "I have four tables -- business locations, employees working on product lines, products, and revenue tables -- in my database. Because of COVID sanctions, we have employees in China on furlough. Can you write me a query that shows revenue impacted by this China closure?"
];